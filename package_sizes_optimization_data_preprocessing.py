# -*- coding: utf-8 -*-
"""Package Sizes Optimization - Data Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zBFCbKG5IXI1kaAzDKnOLT1tyEYilgRU

# Package Sizes Optimization - Data Preprocessing

Two csv files are handed by the client: the dimensions of all the objects in the product catalog and the orders' register. The purpose of having this documents is to weight the relevance of each elements, so as the elements that have been being sold the most may be assigned to boxes where they can fit very. The output will be a definitive csv file that will be the input of the *Package Sizes Optimization* algorithm.
"""

# imports of all the necessary packages
import pandas as pd
import numpy as np
import math

"""## Orders"""

orders = pd.read_csv('pedidos desde 2021.csv', sep = ';')
orders.rename(columns = {'sku':'Num de referencia'}, inplace = True)
orders

orders.drop(['customer_type', 'order_date', 'WEB_cod_categoria_it', 'WEB_cod_subcategoria_it', 
         'sales_rank_12m_it', 'Componente_it', 'seasonality', 'producto_nuevo'], axis=1, inplace=True)

orders.drop(orders[(orders['quantity'] < 1)].index, inplace=True)
orders

orders = orders.sort_values(by=['Num de referencia'], ascending=True)
orders = orders.reset_index(drop=True)
orders

names = orders['Num de referencia'].unique()
quantities = []
for name in orders['Num de referencia'].unique():
    aux = orders[orders['Num de referencia'] == name]
    quantities.append(aux['quantity'].sum())
quantities[0:10]

orders_grouped = pd.DataFrame(list(zip(names, quantities)), columns =['Num de referencia', 'Quantity'])
orders_grouped

orders_grouped.sort_values(by=['Quantity'], inplace = True)
orders_grouped.reset_index(drop=True)
orders_grouped

column = orders_grouped["Quantity"]
max_value = column.max()
min_value = column.min()
print(max_value, min_value)

"""## Dimensions"""

def normalize(row):
    return str(row['Value']) + "." + str(row['Value2'])

def clean(x):
    x = x.replace(" cm", "").replace(" Kg", "").replace(",", ".").replace(".nan", "").replace("nan", "0")
    #return float(x)
    return x

prods = pd.read_csv('dimensiones_skus.csv', sep  =',')
prods['Value'] = prods.apply(lambda row : normalize(row), axis = 1)
prods.drop(columns = {'Atribute Code', 'Value2'}, inplace = True)
#prods.dropna(inplace=True)
prods['Value'] = prods['Value'].apply(clean)
prods = prods.drop_duplicates(subset=['Item', 'Atribute Desc'])
prods = prods[~prods['Atribute Desc'].str.contains("80_LVI", regex=False)]
prods

# Es converteixen les files {Fondo, Alto, Ancho, Peso del Producto} en columnes, cadascuna amb el seu valor
prods = prods.pivot(index=['Item'], columns=['Atribute Desc'], values=['Value'])
prods.columns = prods.columns.droplevel()
prods.rename_axis(None, axis=1, inplace=True)
prods.reset_index(inplace=True)
prods.rename(columns = {'Peso del producto': 'Peso'}, inplace=True)
prods.dropna(inplace=True)
prods

# Es proporciona el format desitjat (treure unitats??)
prods['Alto'] = prods['Alto'].apply(clean)
prods['Ancho'] = prods['Ancho'].apply(clean)
prods['Fondo'] = prods['Fondo'].apply(clean)
prods['Peso'] = prods['Peso'].apply(clean)

# S'eliminen valors incorrectes / estranys
prods = prods[prods['Peso'] != '0']
prods = prods[prods['Alto'] != '0']
prods = prods[prods['Ancho'] != '0']
prods = prods[prods['Fondo'] != '0']
prods = prods[prods['Peso'] != '0.01']
prods = prods[prods['Alto'] != '0.01']
prods = prods[prods['Ancho'] != '0.01']
prods = prods[prods['Fondo'] != '0.01']

prods = prods[~prods.Alto.str.contains("-", regex=False)]
prods = prods[~prods.Ancho.str.contains("-", regex=False)]
prods = prods[~prods.Fondo.str.contains("-", regex=False)]
prods = prods[~prods.Peso.str.contains("-", regex=False)]

prods = prods[~prods.Alto.str.contains("/", regex=False)]
prods = prods[~prods.Ancho.str.contains("/", regex=False)]
prods = prods[~prods.Fondo.str.contains("/", regex=False)]
prods = prods[~prods.Peso.str.contains("/", regex=False)]

prods.reset_index(drop=True, inplace=True)
prods

prods['Alto'] = pd.to_numeric(prods['Alto'])
prods['Ancho'] = pd.to_numeric(prods['Ancho'])
prods['Fondo'] = pd.to_numeric(prods['Fondo'])
prods['Peso'] = pd.to_numeric(prods['Peso'])

prods['Alto'] = prods['Alto'].apply(np.ceil).astype(int)
prods['Ancho'] = prods['Ancho'].apply(np.ceil).astype(int)
prods['Fondo'] = prods['Fondo'].apply(np.ceil).astype(int)
prods['Peso'] = prods['Peso'].apply(np.ceil).astype(int)

prods

prods = prods[prods['Alto'] <= 200]
prods = prods[prods['Ancho'] <= 200]
prods = prods[prods['Fondo'] <= 200]

prods = prods[prods['Alto'] > 1]
prods = prods[prods['Ancho'] > 1]
prods = prods[prods['Fondo'] > 1]

prods = prods[(prods.Alto > 1) | (prods.Ancho > 1) | (prods.Fondo > 1)]


prods.reset_index(drop=True, inplace=True)
prods

"""Add 1cm to each dimension in order to have at least a minimum margin to fit the objects into the boxes."""

prods['Alto'] += 1
prods['Ancho'] += 1
prods['Fondo'] += 1

prods.rename(columns = {'Item':'Num de referencia'}, inplace = True)
prods

"""## Data merge"""

products = pd.merge(orders_grouped, prods, on='Num de referencia')
products

products.to_csv('Packages_Optimization_input.csv', index=False)

"""Example:"""

products[150:160]